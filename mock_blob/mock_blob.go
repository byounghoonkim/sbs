// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shoebillk/sbs/blob (interfaces: BlobServiceClient,BlobService_PushClient,BlobService_GetClient,BlobServiceServer,BlobService_PushServer,BlobService_GetServer)

// Package mock_blob is a generated GoMock package.
package mock_blob

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	blob "github.com/shoebillk/sbs/blob"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockBlobServiceClient is a mock of BlobServiceClient interface
type MockBlobServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlobServiceClientMockRecorder
}

// MockBlobServiceClientMockRecorder is the mock recorder for MockBlobServiceClient
type MockBlobServiceClientMockRecorder struct {
	mock *MockBlobServiceClient
}

// NewMockBlobServiceClient creates a new mock instance
func NewMockBlobServiceClient(ctrl *gomock.Controller) *MockBlobServiceClient {
	mock := &MockBlobServiceClient{ctrl: ctrl}
	mock.recorder = &MockBlobServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobServiceClient) EXPECT() *MockBlobServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBlobServiceClient) Get(arg0 context.Context, arg1 *blob.GetRequest, arg2 ...grpc.CallOption) (blob.BlobService_GetClient, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(blob.BlobService_GetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBlobServiceClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlobServiceClient)(nil).Get), varargs...)
}

// Push mocks base method
func (m *MockBlobServiceClient) Push(arg0 context.Context, arg1 ...grpc.CallOption) (blob.BlobService_PushClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(blob.BlobService_PushClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push
func (mr *MockBlobServiceClientMockRecorder) Push(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockBlobServiceClient)(nil).Push), varargs...)
}

// MockBlobService_PushClient is a mock of BlobService_PushClient interface
type MockBlobService_PushClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlobService_PushClientMockRecorder
}

// MockBlobService_PushClientMockRecorder is the mock recorder for MockBlobService_PushClient
type MockBlobService_PushClientMockRecorder struct {
	mock *MockBlobService_PushClient
}

// NewMockBlobService_PushClient creates a new mock instance
func NewMockBlobService_PushClient(ctrl *gomock.Controller) *MockBlobService_PushClient {
	mock := &MockBlobService_PushClient{ctrl: ctrl}
	mock.recorder = &MockBlobService_PushClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobService_PushClient) EXPECT() *MockBlobService_PushClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method
func (m *MockBlobService_PushClient) CloseAndRecv() (*blob.PushStatus, error) {
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*blob.PushStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockBlobService_PushClientMockRecorder) CloseAndRecv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockBlobService_PushClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method
func (m *MockBlobService_PushClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockBlobService_PushClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBlobService_PushClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockBlobService_PushClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBlobService_PushClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBlobService_PushClient)(nil).Context))
}

// Header mocks base method
func (m *MockBlobService_PushClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockBlobService_PushClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBlobService_PushClient)(nil).Header))
}

// RecvMsg mocks base method
func (m *MockBlobService_PushClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBlobService_PushClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBlobService_PushClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockBlobService_PushClient) Send(arg0 *blob.Chunk) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBlobService_PushClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBlobService_PushClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockBlobService_PushClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBlobService_PushClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBlobService_PushClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockBlobService_PushClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockBlobService_PushClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBlobService_PushClient)(nil).Trailer))
}

// MockBlobService_GetClient is a mock of BlobService_GetClient interface
type MockBlobService_GetClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlobService_GetClientMockRecorder
}

// MockBlobService_GetClientMockRecorder is the mock recorder for MockBlobService_GetClient
type MockBlobService_GetClientMockRecorder struct {
	mock *MockBlobService_GetClient
}

// NewMockBlobService_GetClient creates a new mock instance
func NewMockBlobService_GetClient(ctrl *gomock.Controller) *MockBlobService_GetClient {
	mock := &MockBlobService_GetClient{ctrl: ctrl}
	mock.recorder = &MockBlobService_GetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobService_GetClient) EXPECT() *MockBlobService_GetClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockBlobService_GetClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockBlobService_GetClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBlobService_GetClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockBlobService_GetClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBlobService_GetClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBlobService_GetClient)(nil).Context))
}

// Header mocks base method
func (m *MockBlobService_GetClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockBlobService_GetClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBlobService_GetClient)(nil).Header))
}

// Recv mocks base method
func (m *MockBlobService_GetClient) Recv() (*blob.Chunk, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*blob.Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBlobService_GetClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBlobService_GetClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockBlobService_GetClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBlobService_GetClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBlobService_GetClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockBlobService_GetClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBlobService_GetClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBlobService_GetClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockBlobService_GetClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockBlobService_GetClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBlobService_GetClient)(nil).Trailer))
}

// MockBlobServiceServer is a mock of BlobServiceServer interface
type MockBlobServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBlobServiceServerMockRecorder
}

// MockBlobServiceServerMockRecorder is the mock recorder for MockBlobServiceServer
type MockBlobServiceServerMockRecorder struct {
	mock *MockBlobServiceServer
}

// NewMockBlobServiceServer creates a new mock instance
func NewMockBlobServiceServer(ctrl *gomock.Controller) *MockBlobServiceServer {
	mock := &MockBlobServiceServer{ctrl: ctrl}
	mock.recorder = &MockBlobServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobServiceServer) EXPECT() *MockBlobServiceServerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBlobServiceServer) Get(arg0 *blob.GetRequest, arg1 blob.BlobService_GetServer) error {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockBlobServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlobServiceServer)(nil).Get), arg0, arg1)
}

// Push mocks base method
func (m *MockBlobServiceServer) Push(arg0 blob.BlobService_PushServer) error {
	ret := m.ctrl.Call(m, "Push", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockBlobServiceServerMockRecorder) Push(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockBlobServiceServer)(nil).Push), arg0)
}

// MockBlobService_PushServer is a mock of BlobService_PushServer interface
type MockBlobService_PushServer struct {
	ctrl     *gomock.Controller
	recorder *MockBlobService_PushServerMockRecorder
}

// MockBlobService_PushServerMockRecorder is the mock recorder for MockBlobService_PushServer
type MockBlobService_PushServerMockRecorder struct {
	mock *MockBlobService_PushServer
}

// NewMockBlobService_PushServer creates a new mock instance
func NewMockBlobService_PushServer(ctrl *gomock.Controller) *MockBlobService_PushServer {
	mock := &MockBlobService_PushServer{ctrl: ctrl}
	mock.recorder = &MockBlobService_PushServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobService_PushServer) EXPECT() *MockBlobService_PushServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockBlobService_PushServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBlobService_PushServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBlobService_PushServer)(nil).Context))
}

// Recv mocks base method
func (m *MockBlobService_PushServer) Recv() (*blob.Chunk, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*blob.Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBlobService_PushServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBlobService_PushServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockBlobService_PushServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBlobService_PushServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBlobService_PushServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockBlobService_PushServer) SendAndClose(arg0 *blob.PushStatus) error {
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockBlobService_PushServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockBlobService_PushServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockBlobService_PushServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockBlobService_PushServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBlobService_PushServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockBlobService_PushServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBlobService_PushServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBlobService_PushServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockBlobService_PushServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockBlobService_PushServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBlobService_PushServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockBlobService_PushServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockBlobService_PushServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBlobService_PushServer)(nil).SetTrailer), arg0)
}

// MockBlobService_GetServer is a mock of BlobService_GetServer interface
type MockBlobService_GetServer struct {
	ctrl     *gomock.Controller
	recorder *MockBlobService_GetServerMockRecorder
}

// MockBlobService_GetServerMockRecorder is the mock recorder for MockBlobService_GetServer
type MockBlobService_GetServerMockRecorder struct {
	mock *MockBlobService_GetServer
}

// NewMockBlobService_GetServer creates a new mock instance
func NewMockBlobService_GetServer(ctrl *gomock.Controller) *MockBlobService_GetServer {
	mock := &MockBlobService_GetServer{ctrl: ctrl}
	mock.recorder = &MockBlobService_GetServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobService_GetServer) EXPECT() *MockBlobService_GetServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockBlobService_GetServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBlobService_GetServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBlobService_GetServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockBlobService_GetServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBlobService_GetServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBlobService_GetServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockBlobService_GetServer) Send(arg0 *blob.Chunk) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockBlobService_GetServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBlobService_GetServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockBlobService_GetServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockBlobService_GetServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBlobService_GetServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockBlobService_GetServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBlobService_GetServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBlobService_GetServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockBlobService_GetServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockBlobService_GetServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBlobService_GetServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockBlobService_GetServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockBlobService_GetServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBlobService_GetServer)(nil).SetTrailer), arg0)
}
