// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shoebillk/sbs/blob (interfaces: BlobService_PushServer)

// Package mock_blob is a generated GoMock package.
package mock_blob

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	blob "github.com/shoebillk/sbs/blob"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockBlobService_PushServer is a mock of BlobService_PushServer interface
type MockBlobService_PushServer struct {
	ctrl     *gomock.Controller
	recorder *MockBlobService_PushServerMockRecorder
}

// MockBlobService_PushServerMockRecorder is the mock recorder for MockBlobService_PushServer
type MockBlobService_PushServerMockRecorder struct {
	mock *MockBlobService_PushServer
}

// NewMockBlobService_PushServer creates a new mock instance
func NewMockBlobService_PushServer(ctrl *gomock.Controller) *MockBlobService_PushServer {
	mock := &MockBlobService_PushServer{ctrl: ctrl}
	mock.recorder = &MockBlobService_PushServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlobService_PushServer) EXPECT() *MockBlobService_PushServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockBlobService_PushServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockBlobService_PushServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBlobService_PushServer)(nil).Context))
}

// Recv mocks base method
func (m *MockBlobService_PushServer) Recv() (*blob.Chunk, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*blob.Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockBlobService_PushServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBlobService_PushServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockBlobService_PushServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockBlobService_PushServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBlobService_PushServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockBlobService_PushServer) SendAndClose(arg0 *blob.PushStatus) error {
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockBlobService_PushServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockBlobService_PushServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockBlobService_PushServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockBlobService_PushServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBlobService_PushServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockBlobService_PushServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockBlobService_PushServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBlobService_PushServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockBlobService_PushServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockBlobService_PushServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBlobService_PushServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockBlobService_PushServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockBlobService_PushServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBlobService_PushServer)(nil).SetTrailer), arg0)
}
